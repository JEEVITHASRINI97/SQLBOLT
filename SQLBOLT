SQL TASK

Exercise1:
1.1.Find the title of each film 
SELECT title FROM movies;

1.2.Find the director of each film
SELECT director FROM movies;

1.3.Find the title and director of each film
SELECT title,director FROM movies;

1.4.Find the title and year of each film
SELECT year,director FROM movies;

1.5.Find all the information about each film
SELECT * FROM movies;

Exercise2:
2.1.Find the movie with a row id of 6
SELECT * FROM movies
Where id=6;

2.2.Find the movies released in the years between 2000 and 2010
SELECT * FROM movies
Where year between 2000 and 2010;

2.3Find the movies not released in the years between 2000 and 2010 
SELECT * FROM movies
Where year not between 2000 and 2010;

2.4Find the first 5 Pixar movies and their release year
SELECT * FROM movies
Where id<=5;

Exercise-3
3.1.Find all the Toy Story movies
SELECT * FROM movies
where title like "Toy Story%";

3.2.Find all the movies directed by John Lasseter
SELECT * FROM movies
where Director="John Lasseter";



3.3.Find all the movies (and director) not directed by John Lasseter
SELECT * FROM movies
where Director !="John Lasseter";


3.4.Find all the WALL-* movies
SELECT * FROM movies
where title LIKE "Wall-_";

Exercise 4 

4.1.List all directors of Pixar movies (alphabetically), without duplicates
SELECT distinct director FROM movies
order by director;

           4.2.List the last four Pixar movies released (ordered from most recent to least)
               SELECT * FROM movies
                order by year desc
                 limit 4;

          4.3.List the first five Pixar movies sorted alphabetically
                 SELECT * FROM movies
                  order by title
                    limit 5;


4.4.List the next five Pixar movies sorted alphabetically

SELECT * FROM movies
order by title
limit 5 offset 5;

Exercise-5
5.1.List all the Canadian cities and their populations
SELECT City,Population,country FROM north_american_cities
Where country like "canada";


5.5.Order all the cities in the United States by their latitude from north to south
SELECT city,country,latitude FROM north_american_cities
where Country like "United States"
order by Latitude desc;




5.3.List all the cities west of Chicago, ordered from west to east
SELECT city,country,Longitude FROM north_american_cities
where longitude < -87.629798
order by Longitude ;


5.4.List the two largest cities in Mexico (by population)
SELECT city,country,population FROM north_american_cities
where country = "Mexico"
order by population desc
limit 2;


5.5.List the third and fourth largest cities (by population) in the United States and their population
SELECT * FROM north_american_cities
where country = "United States"
order by population desc
limit 2 offset 2;

Exercise-6
6.1.Find the domestic and international sales for each movie 

SELECT * FROM movies
Inner join Boxoffice
on id = Movie_id;

6.2.Show the sales numbers for each movie that did better internationally rather than domestically
SELECT * FROM movies
Inner join Boxoffice
on id = Movie_id
where International_sales > Domestic_sales;

6.3.List all the movies by their ratings in descending order
SELECT * FROM movies
Inner join Boxoffice
on id = Movie_id
order by Rating desc;
Exercise-7

7.1.Find the list of all buildings that have employees 
SELECT Distinct Building FROM employees;

7.2.Find the list of all buildings and their capacity
SELECT * FROM Buildings;


7.3.List all buildings and the distinct employee roles in each building (including empty buildings)
SELECT Distinct Building_name,Role FROM Buildings
LEFT JOin Employees
on Building_name=Building;

Exercise-8
8.1.Find the name and role of all employees who have not been assigned to a building
SELECT * FROM employees
where building is Not null;
8.2.Find the names of the buildings that hold no employees
SELECT * FROM Buildings
left join Employees
on Building_name=Building
where role is null;

Exercise 9 — Tasks
9.1.List all movies and their combined sales in millions of dollars
SELECT title,(Domestic_sales+International_sales)/1000000 as total_sales FROM movies
inner join boxoffice
on id = movie_id;


9.2.List all movies and their ratings in percent
SELECT title,(rating*10) as percent FROM movies
inner join boxoffice
on id = movie_id;



9.3.List all movies that were released on even number years


SELECT * FROM movies
where year%2=0;

Exercise 10 — Tasks
10.1.Find the longest time that an employee has been at the studio 
SELECT *,max(years_employed) FROM employees;


10.2.For each role, find the average number of years employed by employees in that role
SELECT role,avg(years_employed) FROM employees
group by role;


10.3Find the total number of employee years worked in each building
            SELECT building,sum(years_employed) FROM employees
             group by building;


Exercise 11 — Tasks

11.1.Find the number of Artists in the studio (without a HAVING clause) 

SELECT role,count(role) FROM employees
where role="Artist";

11.2Find the number of Employees of each role in the studio

SELECT role,count(role) FROM employees
group by role;


11.3Find the total number of years employed by all Engineers

SELECT role,sum(years_employed)FROM employees
where role="Engineer";

Exercise 12 — Tasks
12.1Find the number of movies each director has directed
SELECT title,director,count(title) FROM movies
group by director; 

12.2Find the total domestic and international sales that can be attributed to each director
SELECT director,sum(Domestic_sales+International_sales)as Total_supply FROM movies
left join Boxoffice on Id=Movie_id
group by director; 

Exercise 13 — Tasks
13.1.Add the studio's new production, Toy Story 4 to the list of movies (you can use any director) 
Insert Into Movies
Values(4,"Toy Story 4","Jeevitha",2023,120);

13.2.Toy Story 4 has been released to critical acclaim! It had a rating of 8.7, and made 340 million domestically and 270 million internationally. Add the record to the BoxOffice table.
Insert into Boxoffice
values(4,8.7,340000000,2700000000);


Exercise 14 — Tasks
14.1The director for A Bug's Life is incorrect, it was actually directed by John Lasseter
update movies
set Director="John Lasseter"
where id=2;

14.2The year that Toy Story 2 was released is incorrect, it was actually released in 1999
update movies
set Year= 1999
where id=3;

14.3Both the title and director for Toy Story 8 is incorrect! The title should be "Toy Story 3" and it was directed by Lee Unkrich
                 Update Movies
                 set Title= "Toy Story 3",
                 Director= "Lee Unkrich"
                 where id=11;

Exercise 15 — Tasks
15.1.This database is getting too big, lets remove all movies that were released before 2005.
Delete  FROM movies
where year < 2005;

            15.2.Andrew Stanton has also left the studio, so please remove all movies directed by him.
Delete from movies
where director="Andrew Stanton";

Exercise 16 — Tasks
16.1.Create a new table named Database with the following columns:

– Name A string (text) describing the name of the database
– Version A number (floating point) of the latest version of this database
– Download_count An integer count of the number of times this database was downloaded

This table has no constraints.

Create table Database(
Name Text,
Version Float,
Download_count Integer
);

Exercise 17 — Tasks
17.1.Add a column named Aspect_ratio with a FLOAT data type to store the aspect-ratio each movie was released in. ✓
ALTER TABLE MOVIES
ADD Aspect_ratio Float;

17.2.Add another column named Language with a TEXT data type to store the language that the movie was released in. Ensure that the default for this language is English

ALTER TABLE MOVIES
ADD Language TEXT
Default "English";

Exercise 18 — Tasks
18.1.We've sadly reached the end of our lessons, lets clean up by removing the Movies table 
drop table movies;

18.2And drop the BoxOffice table as well
drop table BoxOffice ;




















  



